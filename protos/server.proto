syntax = "proto3";
import "google/rpc/status.proto";

package shipyard;

service RemoteConnection {
  // Auth, needs to be defined but
  // thinking that there would be an auth endpoint which returns a token
  // that token is then used for the following requests

  // Open a stream between two servers
  rpc OpenStream (stream OpenData) returns (stream OpenData);

  // Open a new TCP port for the local service on the server and start listening
  rpc ExposeService (ExposeRequest) returns (ExposeResponse);
  
  // Close the remote TCP port and remove all resources  
  rpc DestroyService (DestroyRequest) returns (NullMessage);
  
  // Close the remote TCP port and remove all resources  
  rpc ListServices (NullMessage) returns (ListResponse);
}
  
  // Expose local service - allow traffic on remote server 8081 to be sent to local machine 8080
  // 1. ExposeRequest called on local server
  //      name = service name
  //      serverAddr = http://remote.server
  //      localPort = 8080
  //      remotePort = 8081
  //      type = local
  // 2. Call CreateListener on remote server to setup a TCP listener
  //      name = service name
  //      port = 8081
  // 3. OpenStream called on remote if no stream exists
  
  // Expose remote service - allow traffic on remote server 8081 to be exposed locally at 8080
  // 1. ExposeRequest called on local server
  //      name = service name
  //      serverAddr = http://remote.server
  //      localPort = 8080
  //      remotePort = 8081
  //      type = remote
  // 2. Call CreateListener on local server to setup a TCP listener
  //      name = service name
  //      port = 8080
  // 3. OpenStream called on remote if no stream exists
message NullMessage{}

message OpenData {
  string service_id    = 1;
  string connection_id = 2;

  // different messages can be sent to the stream
  oneof message {
    Data data = 3;
    ExposeRequest expose = 4;
    DestroyRequest destroy = 5;
    NewConnection new_connection = 6;
    WriteDone write_done = 7;
    ReadDone read_done = 8;
    Closed closed = 9;
    StatusUpdate status_update = 10;
    NullMessage ping = 11;
    google.rpc.Status error = 12;
  }
}

// Data is a message containing data for a connection
message Data {
  bytes data = 1;
}

// Indicates that a new connection has been received
message NewConnection {}

// WriteDone is sent when writing to a socket has been completed
// the next step is to read a reply
message WriteDone {}

// ReadDone is sent when all data has been read from a socket
// the next step is to write a reply
message ReadDone {}

// Closed is sent when a remote connection is closed
message Closed {}

// ExposeRequest is a message indicating that a new TCP Listener should be created
// ExposeRequests will be replayed when a connection is re-opened
message ExposeRequest {
  Service service = 1;
}

// StatusUpdate is sent by the remote connector when the status
// of a service changes
message StatusUpdate {
  ServiceStatus status = 1;
  string message = 2;
}

message Service {
  string name = 1; // name of the service
  string remoteConnectorAddr = 2; // address of the remote component for the service
  string destinationAddr = 3; // address of the service being exposed
  int32 sourcePort = 4; // local port to expose on
  ServiceType type = 6; // is the service running on this machine or the remote machine
  ServiceStatus status = 7;
}

enum ServiceType {
  LOCAL  = 0; // Service exists on local component
  REMOTE = 1; // Service exists  on remote component
}

enum ServiceStatus {
  PENDING = 0; // Service is pending setup
  COMPLETE  = 1; // Service has been setup
  ERROR = 2; // Service has errored when attempting setup
}


message ExposeResponse {
  string id = 1; // id of the service
}

message DestroyRequest {
  string id = 1;
}

message ListResponse {
  repeated Service services = 1;
}

/*
message Match {
  Http http = 1;
  Grpc gRPC = 2;
}

message Http {
  repeated Header headers = 1;
}

message Header {
  string name = 1;
  string exact = 2;
}

message Grpc {
}
*/
/*
1. Client calls Create with the service details and receives a connection id
2. OnCreate server registers the service and opens a TCP port where remote traffic can be received (also sets up a traffic splitter in consul?)
3. Client creates a local TCP socket for the local server calls Open with the connection id to open a gRPC stream to the remote TCP socket. 
   When data is sent to the remote socket the server wraps this in a grpc stream and sends back to the client, the client then forwards this to a local TCP connection

Docker: Create a network alias
Kubernetes: Create a kubernetes service
Consul: Register a service
Consul Connect: Register a service and set up routing
Istio: Register a service and set up routing

local_service "fake" {
  target = "remote_connector.consul"

  name = "service-a"
  port = 9090

  match {
    http {
      header = [
        {
          name  = "x-debug"
          exact = "1"
        },
      ]
    }
  }
}

remote_connector "consul" {
  address = "http://remote.mydomain.com:1244"
}
*/