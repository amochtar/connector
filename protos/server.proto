syntax = "proto3";
package shipyard;

service RemoteConnection {
  // Auth, needs to be defined but
  // thinking that there would be an auth endpoint which returns a token
  // that token is then used for the following requests

  // Open a stream to the remote TCP port
  rpc OpenLocal (stream OpenData) returns (stream OpenData);

  // Open a Connection from a local host to a remote service
  rpc OpenRemote (stream OpenData) returns (stream OpenData);

  // Open a new TCP port for the local service on the server and start listening
  rpc ExposeLocalService (ExposeRequest) returns (ExposeResponse);
  
  // Close the remote TCP port and remove all resources  
  rpc DestroyLocalService (DestroyRequest) returns (NullResponse);
}

message NullResponse{}

message OpenData {
  string service_id = 1;
  string request_id = 2;
  string location   = 3;
  MessageType type  = 4;
  bytes data        = 5;
}

enum MessageType {
  DATA           = 0;
  NEW_CONNECTION = 1;
  WRITE_DONE     = 2;
  READ_DONE      = 3;
  ERROR          = 4;
}

message ExposeRequest {
  string name = 1; // name of the service
  int32 port = 2;
  repeated Match matches = 4;
}

message ExposeResponse {
  string id = 1;
}

message DestroyRequest {
  string id = 1;
}

message RemoteRequest {
}


message Match {
  Http http = 1;
  Grpc gRPC = 2;
}

message Http {
  repeated Header headers = 1;
}

message Header {
  string name = 1;
  string exact = 2;
}

message Grpc {
}

/*
1. Client calls Create with the service details and receives a connection id
2. OnCreate server registers the service and opens a TCP port where remote traffic can be received (also sets up a traffic splitter in consul?)
3. Client creates a local TCP socket for the local server calls Open with the connection id to open a gRPC stream to the remote TCP socket. 
   When data is sent to the remote socket the server wraps this in a grpc stream and sends back to the client, the client then forwards this to a local TCP connection

Docker: Create a network alias
Kubernetes: Create a kubernetes service
Consul: Register a service
Consul Connect: Register a service and set up routing
Istio: Register a service and set up routing

local_service "fake" {
  target = "remote_connector.consul"

  name = "service-a"
  port = 9090

  match {
    http {
      header = [
        {
          name  = "x-debug"
          exact = "1"
        },
      ]
    }
  }
}

remote_connector "consul" {
  address = "http://remote.mydomain.com:1244"
}
*/