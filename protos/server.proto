syntax = "proto3";
package shipyard;

service RemoteConnection {
  // Auth, needs to be defined but
  // thinking that there would be an auth endpoint which returns a token
  // that token is then used for the following requests

  // Open a stream between two servers
  rpc OpenStream (stream OpenData) returns (stream OpenData);

  // Open a new TCP port for the local service on the server and start listening
  rpc ExposeService (ExposeRequest) returns (ExposeResponse);
  
  // Close the remote TCP port and remove all resources  
  rpc DestroyService (DestroyRequest) returns (NullResponse);

  // Create a TCP socket and listen for traffic 
  rpc CreateListener(ListenerRequest) returns (NullResponse);

  // Close  a local TCP socket and stop listenng for traffic 
  rpc DestroyListener(ListenerRequest) returns (NullResponse);
}
  
  // Expose local service - allow traffic on remote server 8081 to be sent to local machine 8080
  // 1. ExposeRequest called on local server
  //      name = service name
  //      serverAddr = http://remote.server
  //      localPort = 8080
  //      remotePort = 8081
  //      type = local
  // 2. Call CreateListener on remote server to setup a TCP listener
  //      name = service name
  //      port = 8081
  // 3. OpenStream called on remote if no stream exists
  
  // Expose remote service - allow traffic on remote server 8081 to be exposed locally at 8080
  // 1. ExposeRequest called on local server
  //      name = service name
  //      serverAddr = http://remote.server
  //      localPort = 8080
  //      remotePort = 8081
  //      type = remote
  // 2. Call CreateListener on local server to setup a TCP listener
  //      name = service name
  //      port = 8080
  // 3. OpenStream called on remote if no stream exists

message NullResponse{}

message OpenData {
  string service_id    = 1;
  string connection_id = 2;
  string location      = 3;
  MessageType type     = 4;
  bytes data           = 5;
}

enum MessageType {
  HELLO          = 0;
  CLOSED         = 1;
  DATA           = 2;
  NEW_CONNECTION = 3;
  WRITE_DONE     = 4;
  READ_DONE      = 5;
  ERROR          = 6;
}

message ExposeRequest {
  string name = 1; // name of the service
  string remoteServerAddr = 2; // address of the remote component for the service
  string serviceAddr = 3; // address of the service being exposed
  int32 localPort = 4; // local port to expose on
  int32 remotePort = 5; // port to expose on
  ServiceType type = 6; // is the service running on this machine or the remote machine
  repeated Match matches = 7;
}

enum ServiceType {
  LOCAL  = 0; // Service exists on local component
  REMOTE = 1; // Service exists  on remote component
}

message ExposeResponse {
  string id = 1; // id of the service
}

message ListenerRequest {
  string id = 1; // id of the service
  int32 localPort = 2; // local port to expose on
}

message DestroyRequest {
  string id = 1;
  string serverAddr = 2; // address of the local listener, local listener can be localhost
}

message Match {
  Http http = 1;
  Grpc gRPC = 2;
}

message Http {
  repeated Header headers = 1;
}

message Header {
  string name = 1;
  string exact = 2;
}

message Grpc {
}

/*
1. Client calls Create with the service details and receives a connection id
2. OnCreate server registers the service and opens a TCP port where remote traffic can be received (also sets up a traffic splitter in consul?)
3. Client creates a local TCP socket for the local server calls Open with the connection id to open a gRPC stream to the remote TCP socket. 
   When data is sent to the remote socket the server wraps this in a grpc stream and sends back to the client, the client then forwards this to a local TCP connection

Docker: Create a network alias
Kubernetes: Create a kubernetes service
Consul: Register a service
Consul Connect: Register a service and set up routing
Istio: Register a service and set up routing

local_service "fake" {
  target = "remote_connector.consul"

  name = "service-a"
  port = 9090

  match {
    http {
      header = [
        {
          name  = "x-debug"
          exact = "1"
        },
      ]
    }
  }
}

remote_connector "consul" {
  address = "http://remote.mydomain.com:1244"
}
*/