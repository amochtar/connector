// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.11.4
// source: server.proto

package shipyard

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	status "google.golang.org/genproto/googleapis/rpc/status"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status1 "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ServiceType int32

const (
	ServiceType_LOCAL  ServiceType = 0 // Service exists on local component
	ServiceType_REMOTE ServiceType = 1 // Service exists  on remote component
)

// Enum value maps for ServiceType.
var (
	ServiceType_name = map[int32]string{
		0: "LOCAL",
		1: "REMOTE",
	}
	ServiceType_value = map[string]int32{
		"LOCAL":  0,
		"REMOTE": 1,
	}
)

func (x ServiceType) Enum() *ServiceType {
	p := new(ServiceType)
	*p = x
	return p
}

func (x ServiceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceType) Descriptor() protoreflect.EnumDescriptor {
	return file_server_proto_enumTypes[0].Descriptor()
}

func (ServiceType) Type() protoreflect.EnumType {
	return &file_server_proto_enumTypes[0]
}

func (x ServiceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceType.Descriptor instead.
func (ServiceType) EnumDescriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{0}
}

type ServiceStatus int32

const (
	ServiceStatus_PENDING  ServiceStatus = 0 // Service is pending setup
	ServiceStatus_COMPLETE ServiceStatus = 1 // Service has been setup
	ServiceStatus_ERROR    ServiceStatus = 2 // Service has errored when attempting setup
)

// Enum value maps for ServiceStatus.
var (
	ServiceStatus_name = map[int32]string{
		0: "PENDING",
		1: "COMPLETE",
		2: "ERROR",
	}
	ServiceStatus_value = map[string]int32{
		"PENDING":  0,
		"COMPLETE": 1,
		"ERROR":    2,
	}
)

func (x ServiceStatus) Enum() *ServiceStatus {
	p := new(ServiceStatus)
	*p = x
	return p
}

func (x ServiceStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_server_proto_enumTypes[1].Descriptor()
}

func (ServiceStatus) Type() protoreflect.EnumType {
	return &file_server_proto_enumTypes[1]
}

func (x ServiceStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceStatus.Descriptor instead.
func (ServiceStatus) EnumDescriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{1}
}

// Expose remote service - allow traffic on remote server 8081 to be exposed locally at 8080
// 1. ExposeRequest called on local server
//      name = service name
//      serverAddr = http://remote.server
//      localPort = 8080
//      remotePort = 8081
//      type = remote
// 2. Call CreateListener on local server to setup a TCP listener
//      name = service name
//      port = 8080
// 3. OpenStream called on remote if no stream exists
type NullMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NullMessage) Reset() {
	*x = NullMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NullMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NullMessage) ProtoMessage() {}

func (x *NullMessage) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NullMessage.ProtoReflect.Descriptor instead.
func (*NullMessage) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{0}
}

type OpenData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceId    string `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	ConnectionId string `protobuf:"bytes,2,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	// different messages can be sent to the stream
	//
	// Types that are assignable to Message:
	//	*OpenData_Data
	//	*OpenData_Expose
	//	*OpenData_Destroy
	//	*OpenData_NewConnection
	//	*OpenData_WriteDone
	//	*OpenData_ReadDone
	//	*OpenData_Closed
	//	*OpenData_StatusUpdate
	//	*OpenData_Ping
	//	*OpenData_Error
	Message isOpenData_Message `protobuf_oneof:"message"`
}

func (x *OpenData) Reset() {
	*x = OpenData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenData) ProtoMessage() {}

func (x *OpenData) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenData.ProtoReflect.Descriptor instead.
func (*OpenData) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{1}
}

func (x *OpenData) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *OpenData) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

func (m *OpenData) GetMessage() isOpenData_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *OpenData) GetData() *Data {
	if x, ok := x.GetMessage().(*OpenData_Data); ok {
		return x.Data
	}
	return nil
}

func (x *OpenData) GetExpose() *ExposeRequest {
	if x, ok := x.GetMessage().(*OpenData_Expose); ok {
		return x.Expose
	}
	return nil
}

func (x *OpenData) GetDestroy() *DestroyRequest {
	if x, ok := x.GetMessage().(*OpenData_Destroy); ok {
		return x.Destroy
	}
	return nil
}

func (x *OpenData) GetNewConnection() *NewConnection {
	if x, ok := x.GetMessage().(*OpenData_NewConnection); ok {
		return x.NewConnection
	}
	return nil
}

func (x *OpenData) GetWriteDone() *WriteDone {
	if x, ok := x.GetMessage().(*OpenData_WriteDone); ok {
		return x.WriteDone
	}
	return nil
}

func (x *OpenData) GetReadDone() *ReadDone {
	if x, ok := x.GetMessage().(*OpenData_ReadDone); ok {
		return x.ReadDone
	}
	return nil
}

func (x *OpenData) GetClosed() *Closed {
	if x, ok := x.GetMessage().(*OpenData_Closed); ok {
		return x.Closed
	}
	return nil
}

func (x *OpenData) GetStatusUpdate() *StatusUpdate {
	if x, ok := x.GetMessage().(*OpenData_StatusUpdate); ok {
		return x.StatusUpdate
	}
	return nil
}

func (x *OpenData) GetPing() *NullMessage {
	if x, ok := x.GetMessage().(*OpenData_Ping); ok {
		return x.Ping
	}
	return nil
}

func (x *OpenData) GetError() *status.Status {
	if x, ok := x.GetMessage().(*OpenData_Error); ok {
		return x.Error
	}
	return nil
}

type isOpenData_Message interface {
	isOpenData_Message()
}

type OpenData_Data struct {
	Data *Data `protobuf:"bytes,3,opt,name=data,proto3,oneof"`
}

type OpenData_Expose struct {
	Expose *ExposeRequest `protobuf:"bytes,4,opt,name=expose,proto3,oneof"`
}

type OpenData_Destroy struct {
	Destroy *DestroyRequest `protobuf:"bytes,5,opt,name=destroy,proto3,oneof"`
}

type OpenData_NewConnection struct {
	NewConnection *NewConnection `protobuf:"bytes,6,opt,name=new_connection,json=newConnection,proto3,oneof"`
}

type OpenData_WriteDone struct {
	WriteDone *WriteDone `protobuf:"bytes,7,opt,name=write_done,json=writeDone,proto3,oneof"`
}

type OpenData_ReadDone struct {
	ReadDone *ReadDone `protobuf:"bytes,8,opt,name=read_done,json=readDone,proto3,oneof"`
}

type OpenData_Closed struct {
	Closed *Closed `protobuf:"bytes,9,opt,name=closed,proto3,oneof"`
}

type OpenData_StatusUpdate struct {
	StatusUpdate *StatusUpdate `protobuf:"bytes,10,opt,name=status_update,json=statusUpdate,proto3,oneof"`
}

type OpenData_Ping struct {
	Ping *NullMessage `protobuf:"bytes,11,opt,name=ping,proto3,oneof"`
}

type OpenData_Error struct {
	Error *status.Status `protobuf:"bytes,12,opt,name=error,proto3,oneof"`
}

func (*OpenData_Data) isOpenData_Message() {}

func (*OpenData_Expose) isOpenData_Message() {}

func (*OpenData_Destroy) isOpenData_Message() {}

func (*OpenData_NewConnection) isOpenData_Message() {}

func (*OpenData_WriteDone) isOpenData_Message() {}

func (*OpenData_ReadDone) isOpenData_Message() {}

func (*OpenData_Closed) isOpenData_Message() {}

func (*OpenData_StatusUpdate) isOpenData_Message() {}

func (*OpenData_Ping) isOpenData_Message() {}

func (*OpenData_Error) isOpenData_Message() {}

// Data is a message containing data for a connection
type Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Data) Reset() {
	*x = Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data) ProtoMessage() {}

func (x *Data) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data.ProtoReflect.Descriptor instead.
func (*Data) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{2}
}

func (x *Data) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// Indicates that a new connection has been received
type NewConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NewConnection) Reset() {
	*x = NewConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewConnection) ProtoMessage() {}

func (x *NewConnection) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewConnection.ProtoReflect.Descriptor instead.
func (*NewConnection) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{3}
}

// WriteDone is sent when writing to a socket has been completed
// the next step is to read a reply
type WriteDone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WriteDone) Reset() {
	*x = WriteDone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteDone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteDone) ProtoMessage() {}

func (x *WriteDone) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteDone.ProtoReflect.Descriptor instead.
func (*WriteDone) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{4}
}

// ReadDone is sent when all data has been read from a socket
// the next step is to write a reply
type ReadDone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReadDone) Reset() {
	*x = ReadDone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadDone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadDone) ProtoMessage() {}

func (x *ReadDone) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadDone.ProtoReflect.Descriptor instead.
func (*ReadDone) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{5}
}

// Closed is sent when a remote connection is closed
type Closed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Closed) Reset() {
	*x = Closed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Closed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Closed) ProtoMessage() {}

func (x *Closed) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Closed.ProtoReflect.Descriptor instead.
func (*Closed) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{6}
}

// ExposeRequest is a message indicating that a new TCP Listener should be created
// ExposeRequests will be replayed when a connection is re-opened
type ExposeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Service *Service `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
}

func (x *ExposeRequest) Reset() {
	*x = ExposeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExposeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExposeRequest) ProtoMessage() {}

func (x *ExposeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExposeRequest.ProtoReflect.Descriptor instead.
func (*ExposeRequest) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{7}
}

func (x *ExposeRequest) GetService() *Service {
	if x != nil {
		return x.Service
	}
	return nil
}

// StatusUpdate is sent by the remote connector when the status
// of a service changes
type StatusUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  ServiceStatus `protobuf:"varint,1,opt,name=status,proto3,enum=shipyard.ServiceStatus" json:"status,omitempty"`
	Message string        `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *StatusUpdate) Reset() {
	*x = StatusUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusUpdate) ProtoMessage() {}

func (x *StatusUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusUpdate.ProtoReflect.Descriptor instead.
func (*StatusUpdate) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{8}
}

func (x *StatusUpdate) GetStatus() ServiceStatus {
	if x != nil {
		return x.Status
	}
	return ServiceStatus_PENDING
}

func (x *StatusUpdate) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Service struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                               // name of the service
	RemoteConnectorAddr string        `protobuf:"bytes,2,opt,name=remoteConnectorAddr,proto3" json:"remoteConnectorAddr,omitempty"` // address of the remote component for the service
	DestinationAddr     string        `protobuf:"bytes,3,opt,name=destinationAddr,proto3" json:"destinationAddr,omitempty"`         // address of the service being exposed
	SourcePort          int32         `protobuf:"varint,4,opt,name=sourcePort,proto3" json:"sourcePort,omitempty"`                  // local port to expose on
	Type                ServiceType   `protobuf:"varint,6,opt,name=type,proto3,enum=shipyard.ServiceType" json:"type,omitempty"`    // is the service running on this machine or the remote machine
	Status              ServiceStatus `protobuf:"varint,7,opt,name=status,proto3,enum=shipyard.ServiceStatus" json:"status,omitempty"`
}

func (x *Service) Reset() {
	*x = Service{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service) ProtoMessage() {}

func (x *Service) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service.ProtoReflect.Descriptor instead.
func (*Service) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{9}
}

func (x *Service) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Service) GetRemoteConnectorAddr() string {
	if x != nil {
		return x.RemoteConnectorAddr
	}
	return ""
}

func (x *Service) GetDestinationAddr() string {
	if x != nil {
		return x.DestinationAddr
	}
	return ""
}

func (x *Service) GetSourcePort() int32 {
	if x != nil {
		return x.SourcePort
	}
	return 0
}

func (x *Service) GetType() ServiceType {
	if x != nil {
		return x.Type
	}
	return ServiceType_LOCAL
}

func (x *Service) GetStatus() ServiceStatus {
	if x != nil {
		return x.Status
	}
	return ServiceStatus_PENDING
}

type ExposeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // id of the service
}

func (x *ExposeResponse) Reset() {
	*x = ExposeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExposeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExposeResponse) ProtoMessage() {}

func (x *ExposeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExposeResponse.ProtoReflect.Descriptor instead.
func (*ExposeResponse) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{10}
}

func (x *ExposeResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DestroyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DestroyRequest) Reset() {
	*x = DestroyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestroyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyRequest) ProtoMessage() {}

func (x *DestroyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyRequest.ProtoReflect.Descriptor instead.
func (*DestroyRequest) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{11}
}

func (x *DestroyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Services []*Service `protobuf:"bytes,1,rep,name=services,proto3" json:"services,omitempty"`
}

func (x *ListResponse) Reset() {
	*x = ListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResponse) ProtoMessage() {}

func (x *ListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResponse.ProtoReflect.Descriptor instead.
func (*ListResponse) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{12}
}

func (x *ListResponse) GetServices() []*Service {
	if x != nil {
		return x.Services
	}
	return nil
}

var File_server_proto protoreflect.FileDescriptor

var file_server_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08,
	0x73, 0x68, 0x69, 0x70, 0x79, 0x61, 0x72, 0x64, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x0d, 0x0a, 0x0b, 0x4e, 0x75, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0xd7, 0x04, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x24, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x73, 0x68, 0x69, 0x70, 0x79, 0x61, 0x72, 0x64, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x48,
	0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x31, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x6f, 0x73,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x68, 0x69, 0x70, 0x79, 0x61,
	0x72, 0x64, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x06, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x64, 0x65,
	0x73, 0x74, 0x72, 0x6f, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x68,
	0x69, 0x70, 0x79, 0x61, 0x72, 0x64, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79,
	0x12, 0x40, 0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x68, 0x69, 0x70, 0x79,
	0x61, 0x72, 0x64, 0x2e, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x0d, 0x6e, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x0a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x64, 0x6f, 0x6e, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x68, 0x69, 0x70, 0x79, 0x61, 0x72,
	0x64, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x09, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x68,
	0x69, 0x70, 0x79, 0x61, 0x72, 0x64, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x44, 0x6f, 0x6e, 0x65, 0x48,
	0x00, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x68,
	0x69, 0x70, 0x79, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x48, 0x00, 0x52,
	0x06, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x73, 0x68, 0x69, 0x70, 0x79, 0x61, 0x72, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x68, 0x69, 0x70, 0x79, 0x61, 0x72, 0x64, 0x2e,
	0x4e, 0x75, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x04, 0x70,
	0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42,
	0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x1a, 0x0a, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x0f, 0x0a, 0x0d, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x0b, 0x0a, 0x09, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x44, 0x6f, 0x6e, 0x65, 0x22, 0x0a, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x64, 0x44, 0x6f, 0x6e, 0x65,
	0x22, 0x08, 0x0a, 0x06, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x22, 0x3c, 0x0a, 0x0d, 0x45, 0x78,
	0x70, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x07, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73,
	0x68, 0x69, 0x70, 0x79, 0x61, 0x72, 0x64, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x59, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x73, 0x68, 0x69, 0x70, 0x79,
	0x61, 0x72, 0x64, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0xf5, 0x01, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x41, 0x64, 0x64, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x12,
	0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x29, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x73, 0x68, 0x69, 0x70, 0x79, 0x61, 0x72, 0x64, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x73, 0x68, 0x69,
	0x70, 0x79, 0x61, 0x72, 0x64, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x20, 0x0a, 0x0e, 0x45,
	0x78, 0x70, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x20, 0x0a,
	0x0e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x3d, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2d, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x73, 0x68, 0x69, 0x70, 0x79, 0x61, 0x72, 0x64, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2a, 0x24,
	0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a,
	0x05, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x4d, 0x4f,
	0x54, 0x45, 0x10, 0x01, 0x2a, 0x35, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x01,
	0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x32, 0x92, 0x02, 0x0a, 0x10,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x38, 0x0a, 0x0a, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x12,
	0x2e, 0x73, 0x68, 0x69, 0x70, 0x79, 0x61, 0x72, 0x64, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x1a, 0x12, 0x2e, 0x73, 0x68, 0x69, 0x70, 0x79, 0x61, 0x72, 0x64, 0x2e, 0x4f, 0x70,
	0x65, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x28, 0x01, 0x30, 0x01, 0x12, 0x42, 0x0a, 0x0d, 0x45, 0x78,
	0x70, 0x6f, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x17, 0x2e, 0x73, 0x68,
	0x69, 0x70, 0x79, 0x61, 0x72, 0x64, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x73, 0x68, 0x69, 0x70, 0x79, 0x61, 0x72, 0x64, 0x2e,
	0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41,
	0x0a, 0x0e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x18, 0x2e, 0x73, 0x68, 0x69, 0x70, 0x79, 0x61, 0x72, 0x64, 0x2e, 0x44, 0x65, 0x73, 0x74,
	0x72, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x73, 0x68, 0x69,
	0x70, 0x79, 0x61, 0x72, 0x64, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x12, 0x15, 0x2e, 0x73, 0x68, 0x69, 0x70, 0x79, 0x61, 0x72, 0x64, 0x2e, 0x4e, 0x75, 0x6c,
	0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x16, 0x2e, 0x73, 0x68, 0x69, 0x70, 0x79,
	0x61, 0x72, 0x64, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_server_proto_rawDescOnce sync.Once
	file_server_proto_rawDescData = file_server_proto_rawDesc
)

func file_server_proto_rawDescGZIP() []byte {
	file_server_proto_rawDescOnce.Do(func() {
		file_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_server_proto_rawDescData)
	})
	return file_server_proto_rawDescData
}

var file_server_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_server_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_server_proto_goTypes = []interface{}{
	(ServiceType)(0),       // 0: shipyard.ServiceType
	(ServiceStatus)(0),     // 1: shipyard.ServiceStatus
	(*NullMessage)(nil),    // 2: shipyard.NullMessage
	(*OpenData)(nil),       // 3: shipyard.OpenData
	(*Data)(nil),           // 4: shipyard.Data
	(*NewConnection)(nil),  // 5: shipyard.NewConnection
	(*WriteDone)(nil),      // 6: shipyard.WriteDone
	(*ReadDone)(nil),       // 7: shipyard.ReadDone
	(*Closed)(nil),         // 8: shipyard.Closed
	(*ExposeRequest)(nil),  // 9: shipyard.ExposeRequest
	(*StatusUpdate)(nil),   // 10: shipyard.StatusUpdate
	(*Service)(nil),        // 11: shipyard.Service
	(*ExposeResponse)(nil), // 12: shipyard.ExposeResponse
	(*DestroyRequest)(nil), // 13: shipyard.DestroyRequest
	(*ListResponse)(nil),   // 14: shipyard.ListResponse
	(*status.Status)(nil),  // 15: google.rpc.Status
}
var file_server_proto_depIdxs = []int32{
	4,  // 0: shipyard.OpenData.data:type_name -> shipyard.Data
	9,  // 1: shipyard.OpenData.expose:type_name -> shipyard.ExposeRequest
	13, // 2: shipyard.OpenData.destroy:type_name -> shipyard.DestroyRequest
	5,  // 3: shipyard.OpenData.new_connection:type_name -> shipyard.NewConnection
	6,  // 4: shipyard.OpenData.write_done:type_name -> shipyard.WriteDone
	7,  // 5: shipyard.OpenData.read_done:type_name -> shipyard.ReadDone
	8,  // 6: shipyard.OpenData.closed:type_name -> shipyard.Closed
	10, // 7: shipyard.OpenData.status_update:type_name -> shipyard.StatusUpdate
	2,  // 8: shipyard.OpenData.ping:type_name -> shipyard.NullMessage
	15, // 9: shipyard.OpenData.error:type_name -> google.rpc.Status
	11, // 10: shipyard.ExposeRequest.service:type_name -> shipyard.Service
	1,  // 11: shipyard.StatusUpdate.status:type_name -> shipyard.ServiceStatus
	0,  // 12: shipyard.Service.type:type_name -> shipyard.ServiceType
	1,  // 13: shipyard.Service.status:type_name -> shipyard.ServiceStatus
	11, // 14: shipyard.ListResponse.services:type_name -> shipyard.Service
	3,  // 15: shipyard.RemoteConnection.OpenStream:input_type -> shipyard.OpenData
	9,  // 16: shipyard.RemoteConnection.ExposeService:input_type -> shipyard.ExposeRequest
	13, // 17: shipyard.RemoteConnection.DestroyService:input_type -> shipyard.DestroyRequest
	2,  // 18: shipyard.RemoteConnection.ListServices:input_type -> shipyard.NullMessage
	3,  // 19: shipyard.RemoteConnection.OpenStream:output_type -> shipyard.OpenData
	12, // 20: shipyard.RemoteConnection.ExposeService:output_type -> shipyard.ExposeResponse
	2,  // 21: shipyard.RemoteConnection.DestroyService:output_type -> shipyard.NullMessage
	14, // 22: shipyard.RemoteConnection.ListServices:output_type -> shipyard.ListResponse
	19, // [19:23] is the sub-list for method output_type
	15, // [15:19] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_server_proto_init() }
func file_server_proto_init() {
	if File_server_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_server_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NullMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteDone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadDone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Closed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExposeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Service); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExposeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestroyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_server_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*OpenData_Data)(nil),
		(*OpenData_Expose)(nil),
		(*OpenData_Destroy)(nil),
		(*OpenData_NewConnection)(nil),
		(*OpenData_WriteDone)(nil),
		(*OpenData_ReadDone)(nil),
		(*OpenData_Closed)(nil),
		(*OpenData_StatusUpdate)(nil),
		(*OpenData_Ping)(nil),
		(*OpenData_Error)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_server_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_server_proto_goTypes,
		DependencyIndexes: file_server_proto_depIdxs,
		EnumInfos:         file_server_proto_enumTypes,
		MessageInfos:      file_server_proto_msgTypes,
	}.Build()
	File_server_proto = out.File
	file_server_proto_rawDesc = nil
	file_server_proto_goTypes = nil
	file_server_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RemoteConnectionClient is the client API for RemoteConnection service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RemoteConnectionClient interface {
	// Open a stream between two servers
	OpenStream(ctx context.Context, opts ...grpc.CallOption) (RemoteConnection_OpenStreamClient, error)
	// Open a new TCP port for the local service on the server and start listening
	ExposeService(ctx context.Context, in *ExposeRequest, opts ...grpc.CallOption) (*ExposeResponse, error)
	// Close the remote TCP port and remove all resources
	DestroyService(ctx context.Context, in *DestroyRequest, opts ...grpc.CallOption) (*NullMessage, error)
	// Close the remote TCP port and remove all resources
	ListServices(ctx context.Context, in *NullMessage, opts ...grpc.CallOption) (*ListResponse, error)
}

type remoteConnectionClient struct {
	cc grpc.ClientConnInterface
}

func NewRemoteConnectionClient(cc grpc.ClientConnInterface) RemoteConnectionClient {
	return &remoteConnectionClient{cc}
}

func (c *remoteConnectionClient) OpenStream(ctx context.Context, opts ...grpc.CallOption) (RemoteConnection_OpenStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RemoteConnection_serviceDesc.Streams[0], "/shipyard.RemoteConnection/OpenStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &remoteConnectionOpenStreamClient{stream}
	return x, nil
}

type RemoteConnection_OpenStreamClient interface {
	Send(*OpenData) error
	Recv() (*OpenData, error)
	grpc.ClientStream
}

type remoteConnectionOpenStreamClient struct {
	grpc.ClientStream
}

func (x *remoteConnectionOpenStreamClient) Send(m *OpenData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *remoteConnectionOpenStreamClient) Recv() (*OpenData, error) {
	m := new(OpenData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *remoteConnectionClient) ExposeService(ctx context.Context, in *ExposeRequest, opts ...grpc.CallOption) (*ExposeResponse, error) {
	out := new(ExposeResponse)
	err := c.cc.Invoke(ctx, "/shipyard.RemoteConnection/ExposeService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteConnectionClient) DestroyService(ctx context.Context, in *DestroyRequest, opts ...grpc.CallOption) (*NullMessage, error) {
	out := new(NullMessage)
	err := c.cc.Invoke(ctx, "/shipyard.RemoteConnection/DestroyService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteConnectionClient) ListServices(ctx context.Context, in *NullMessage, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/shipyard.RemoteConnection/ListServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RemoteConnectionServer is the server API for RemoteConnection service.
type RemoteConnectionServer interface {
	// Open a stream between two servers
	OpenStream(RemoteConnection_OpenStreamServer) error
	// Open a new TCP port for the local service on the server and start listening
	ExposeService(context.Context, *ExposeRequest) (*ExposeResponse, error)
	// Close the remote TCP port and remove all resources
	DestroyService(context.Context, *DestroyRequest) (*NullMessage, error)
	// Close the remote TCP port and remove all resources
	ListServices(context.Context, *NullMessage) (*ListResponse, error)
}

// UnimplementedRemoteConnectionServer can be embedded to have forward compatible implementations.
type UnimplementedRemoteConnectionServer struct {
}

func (*UnimplementedRemoteConnectionServer) OpenStream(RemoteConnection_OpenStreamServer) error {
	return status1.Errorf(codes.Unimplemented, "method OpenStream not implemented")
}
func (*UnimplementedRemoteConnectionServer) ExposeService(context.Context, *ExposeRequest) (*ExposeResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ExposeService not implemented")
}
func (*UnimplementedRemoteConnectionServer) DestroyService(context.Context, *DestroyRequest) (*NullMessage, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DestroyService not implemented")
}
func (*UnimplementedRemoteConnectionServer) ListServices(context.Context, *NullMessage) (*ListResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListServices not implemented")
}

func RegisterRemoteConnectionServer(s *grpc.Server, srv RemoteConnectionServer) {
	s.RegisterService(&_RemoteConnection_serviceDesc, srv)
}

func _RemoteConnection_OpenStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RemoteConnectionServer).OpenStream(&remoteConnectionOpenStreamServer{stream})
}

type RemoteConnection_OpenStreamServer interface {
	Send(*OpenData) error
	Recv() (*OpenData, error)
	grpc.ServerStream
}

type remoteConnectionOpenStreamServer struct {
	grpc.ServerStream
}

func (x *remoteConnectionOpenStreamServer) Send(m *OpenData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *remoteConnectionOpenStreamServer) Recv() (*OpenData, error) {
	m := new(OpenData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RemoteConnection_ExposeService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExposeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteConnectionServer).ExposeService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shipyard.RemoteConnection/ExposeService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteConnectionServer).ExposeService(ctx, req.(*ExposeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteConnection_DestroyService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteConnectionServer).DestroyService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shipyard.RemoteConnection/DestroyService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteConnectionServer).DestroyService(ctx, req.(*DestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteConnection_ListServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NullMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteConnectionServer).ListServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shipyard.RemoteConnection/ListServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteConnectionServer).ListServices(ctx, req.(*NullMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _RemoteConnection_serviceDesc = grpc.ServiceDesc{
	ServiceName: "shipyard.RemoteConnection",
	HandlerType: (*RemoteConnectionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExposeService",
			Handler:    _RemoteConnection_ExposeService_Handler,
		},
		{
			MethodName: "DestroyService",
			Handler:    _RemoteConnection_DestroyService_Handler,
		},
		{
			MethodName: "ListServices",
			Handler:    _RemoteConnection_ListServices_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "OpenStream",
			Handler:       _RemoteConnection_OpenStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "server.proto",
}
