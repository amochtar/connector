// Code generated by protoc-gen-go. DO NOT EDIT.
// source: server.proto

package shipyard

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	status "google.golang.org/genproto/googleapis/rpc/status"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status1 "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ServiceType int32

const (
	ServiceType_LOCAL  ServiceType = 0
	ServiceType_REMOTE ServiceType = 1
)

var ServiceType_name = map[int32]string{
	0: "LOCAL",
	1: "REMOTE",
}

var ServiceType_value = map[string]int32{
	"LOCAL":  0,
	"REMOTE": 1,
}

func (x ServiceType) String() string {
	return proto.EnumName(ServiceType_name, int32(x))
}

func (ServiceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{0}
}

type ServiceStatus int32

const (
	ServiceStatus_PENDING  ServiceStatus = 0
	ServiceStatus_COMPLETE ServiceStatus = 1
	ServiceStatus_ERROR    ServiceStatus = 2
)

var ServiceStatus_name = map[int32]string{
	0: "PENDING",
	1: "COMPLETE",
	2: "ERROR",
}

var ServiceStatus_value = map[string]int32{
	"PENDING":  0,
	"COMPLETE": 1,
	"ERROR":    2,
}

func (x ServiceStatus) String() string {
	return proto.EnumName(ServiceStatus_name, int32(x))
}

func (ServiceStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{1}
}

// Expose remote service - allow traffic on remote server 8081 to be exposed locally at 8080
// 1. ExposeRequest called on local server
//      name = service name
//      serverAddr = http://remote.server
//      localPort = 8080
//      remotePort = 8081
//      type = remote
// 2. Call CreateListener on local server to setup a TCP listener
//      name = service name
//      port = 8080
// 3. OpenStream called on remote if no stream exists
type NullMessage struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NullMessage) Reset()         { *m = NullMessage{} }
func (m *NullMessage) String() string { return proto.CompactTextString(m) }
func (*NullMessage) ProtoMessage()    {}
func (*NullMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{0}
}

func (m *NullMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NullMessage.Unmarshal(m, b)
}
func (m *NullMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NullMessage.Marshal(b, m, deterministic)
}
func (m *NullMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NullMessage.Merge(m, src)
}
func (m *NullMessage) XXX_Size() int {
	return xxx_messageInfo_NullMessage.Size(m)
}
func (m *NullMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_NullMessage.DiscardUnknown(m)
}

var xxx_messageInfo_NullMessage proto.InternalMessageInfo

type OpenData struct {
	ServiceId    string `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	ConnectionId string `protobuf:"bytes,2,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	// different messages can be sent to the stream
	//
	// Types that are valid to be assigned to Message:
	//	*OpenData_Data
	//	*OpenData_Expose
	//	*OpenData_Destroy
	//	*OpenData_NewConnection
	//	*OpenData_WriteDone
	//	*OpenData_ReadDone
	//	*OpenData_Closed
	//	*OpenData_Error
	Message              isOpenData_Message `protobuf_oneof:"message"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *OpenData) Reset()         { *m = OpenData{} }
func (m *OpenData) String() string { return proto.CompactTextString(m) }
func (*OpenData) ProtoMessage()    {}
func (*OpenData) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{1}
}

func (m *OpenData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpenData.Unmarshal(m, b)
}
func (m *OpenData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpenData.Marshal(b, m, deterministic)
}
func (m *OpenData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenData.Merge(m, src)
}
func (m *OpenData) XXX_Size() int {
	return xxx_messageInfo_OpenData.Size(m)
}
func (m *OpenData) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenData.DiscardUnknown(m)
}

var xxx_messageInfo_OpenData proto.InternalMessageInfo

func (m *OpenData) GetServiceId() string {
	if m != nil {
		return m.ServiceId
	}
	return ""
}

func (m *OpenData) GetConnectionId() string {
	if m != nil {
		return m.ConnectionId
	}
	return ""
}

type isOpenData_Message interface {
	isOpenData_Message()
}

type OpenData_Data struct {
	Data *Data `protobuf:"bytes,3,opt,name=data,proto3,oneof"`
}

type OpenData_Expose struct {
	Expose *ExposeRequest `protobuf:"bytes,4,opt,name=expose,proto3,oneof"`
}

type OpenData_Destroy struct {
	Destroy *DestroyRequest `protobuf:"bytes,5,opt,name=destroy,proto3,oneof"`
}

type OpenData_NewConnection struct {
	NewConnection *NewConnection `protobuf:"bytes,6,opt,name=new_connection,json=newConnection,proto3,oneof"`
}

type OpenData_WriteDone struct {
	WriteDone *WriteDone `protobuf:"bytes,7,opt,name=write_done,json=writeDone,proto3,oneof"`
}

type OpenData_ReadDone struct {
	ReadDone *ReadDone `protobuf:"bytes,8,opt,name=read_done,json=readDone,proto3,oneof"`
}

type OpenData_Closed struct {
	Closed *Closed `protobuf:"bytes,9,opt,name=closed,proto3,oneof"`
}

type OpenData_Error struct {
	Error *status.Status `protobuf:"bytes,10,opt,name=error,proto3,oneof"`
}

func (*OpenData_Data) isOpenData_Message() {}

func (*OpenData_Expose) isOpenData_Message() {}

func (*OpenData_Destroy) isOpenData_Message() {}

func (*OpenData_NewConnection) isOpenData_Message() {}

func (*OpenData_WriteDone) isOpenData_Message() {}

func (*OpenData_ReadDone) isOpenData_Message() {}

func (*OpenData_Closed) isOpenData_Message() {}

func (*OpenData_Error) isOpenData_Message() {}

func (m *OpenData) GetMessage() isOpenData_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *OpenData) GetData() *Data {
	if x, ok := m.GetMessage().(*OpenData_Data); ok {
		return x.Data
	}
	return nil
}

func (m *OpenData) GetExpose() *ExposeRequest {
	if x, ok := m.GetMessage().(*OpenData_Expose); ok {
		return x.Expose
	}
	return nil
}

func (m *OpenData) GetDestroy() *DestroyRequest {
	if x, ok := m.GetMessage().(*OpenData_Destroy); ok {
		return x.Destroy
	}
	return nil
}

func (m *OpenData) GetNewConnection() *NewConnection {
	if x, ok := m.GetMessage().(*OpenData_NewConnection); ok {
		return x.NewConnection
	}
	return nil
}

func (m *OpenData) GetWriteDone() *WriteDone {
	if x, ok := m.GetMessage().(*OpenData_WriteDone); ok {
		return x.WriteDone
	}
	return nil
}

func (m *OpenData) GetReadDone() *ReadDone {
	if x, ok := m.GetMessage().(*OpenData_ReadDone); ok {
		return x.ReadDone
	}
	return nil
}

func (m *OpenData) GetClosed() *Closed {
	if x, ok := m.GetMessage().(*OpenData_Closed); ok {
		return x.Closed
	}
	return nil
}

func (m *OpenData) GetError() *status.Status {
	if x, ok := m.GetMessage().(*OpenData_Error); ok {
		return x.Error
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*OpenData) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*OpenData_Data)(nil),
		(*OpenData_Expose)(nil),
		(*OpenData_Destroy)(nil),
		(*OpenData_NewConnection)(nil),
		(*OpenData_WriteDone)(nil),
		(*OpenData_ReadDone)(nil),
		(*OpenData_Closed)(nil),
		(*OpenData_Error)(nil),
	}
}

// Data is a message containing data for a connection
type Data struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Data) Reset()         { *m = Data{} }
func (m *Data) String() string { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()    {}
func (*Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{2}
}

func (m *Data) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Data.Unmarshal(m, b)
}
func (m *Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Data.Marshal(b, m, deterministic)
}
func (m *Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Data.Merge(m, src)
}
func (m *Data) XXX_Size() int {
	return xxx_messageInfo_Data.Size(m)
}
func (m *Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Data proto.InternalMessageInfo

func (m *Data) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// Indicates that a new connection has been received
type NewConnection struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewConnection) Reset()         { *m = NewConnection{} }
func (m *NewConnection) String() string { return proto.CompactTextString(m) }
func (*NewConnection) ProtoMessage()    {}
func (*NewConnection) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{3}
}

func (m *NewConnection) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewConnection.Unmarshal(m, b)
}
func (m *NewConnection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewConnection.Marshal(b, m, deterministic)
}
func (m *NewConnection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewConnection.Merge(m, src)
}
func (m *NewConnection) XXX_Size() int {
	return xxx_messageInfo_NewConnection.Size(m)
}
func (m *NewConnection) XXX_DiscardUnknown() {
	xxx_messageInfo_NewConnection.DiscardUnknown(m)
}

var xxx_messageInfo_NewConnection proto.InternalMessageInfo

// WriteDone is sent when writing to a socket has been completed
// the next step is to read a reply
type WriteDone struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WriteDone) Reset()         { *m = WriteDone{} }
func (m *WriteDone) String() string { return proto.CompactTextString(m) }
func (*WriteDone) ProtoMessage()    {}
func (*WriteDone) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{4}
}

func (m *WriteDone) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WriteDone.Unmarshal(m, b)
}
func (m *WriteDone) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WriteDone.Marshal(b, m, deterministic)
}
func (m *WriteDone) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WriteDone.Merge(m, src)
}
func (m *WriteDone) XXX_Size() int {
	return xxx_messageInfo_WriteDone.Size(m)
}
func (m *WriteDone) XXX_DiscardUnknown() {
	xxx_messageInfo_WriteDone.DiscardUnknown(m)
}

var xxx_messageInfo_WriteDone proto.InternalMessageInfo

// ReadDone is sent when all data has been read from a socket
// the next step is to write a reply
type ReadDone struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReadDone) Reset()         { *m = ReadDone{} }
func (m *ReadDone) String() string { return proto.CompactTextString(m) }
func (*ReadDone) ProtoMessage()    {}
func (*ReadDone) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{5}
}

func (m *ReadDone) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadDone.Unmarshal(m, b)
}
func (m *ReadDone) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadDone.Marshal(b, m, deterministic)
}
func (m *ReadDone) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadDone.Merge(m, src)
}
func (m *ReadDone) XXX_Size() int {
	return xxx_messageInfo_ReadDone.Size(m)
}
func (m *ReadDone) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadDone.DiscardUnknown(m)
}

var xxx_messageInfo_ReadDone proto.InternalMessageInfo

// Closed is sent when a remote connection is closed
type Closed struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Closed) Reset()         { *m = Closed{} }
func (m *Closed) String() string { return proto.CompactTextString(m) }
func (*Closed) ProtoMessage()    {}
func (*Closed) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{6}
}

func (m *Closed) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Closed.Unmarshal(m, b)
}
func (m *Closed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Closed.Marshal(b, m, deterministic)
}
func (m *Closed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Closed.Merge(m, src)
}
func (m *Closed) XXX_Size() int {
	return xxx_messageInfo_Closed.Size(m)
}
func (m *Closed) XXX_DiscardUnknown() {
	xxx_messageInfo_Closed.DiscardUnknown(m)
}

var xxx_messageInfo_Closed proto.InternalMessageInfo

// ExposeRequest is a message indicating that a new TCP Listener should be created
// ExposeRequests will be replayed when a connection is re-opened
type ExposeRequest struct {
	Service              *Service `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExposeRequest) Reset()         { *m = ExposeRequest{} }
func (m *ExposeRequest) String() string { return proto.CompactTextString(m) }
func (*ExposeRequest) ProtoMessage()    {}
func (*ExposeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{7}
}

func (m *ExposeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExposeRequest.Unmarshal(m, b)
}
func (m *ExposeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExposeRequest.Marshal(b, m, deterministic)
}
func (m *ExposeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExposeRequest.Merge(m, src)
}
func (m *ExposeRequest) XXX_Size() int {
	return xxx_messageInfo_ExposeRequest.Size(m)
}
func (m *ExposeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExposeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExposeRequest proto.InternalMessageInfo

func (m *ExposeRequest) GetService() *Service {
	if m != nil {
		return m.Service
	}
	return nil
}

type Service struct {
	Name                 string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	RemoteConnectorAddr  string        `protobuf:"bytes,2,opt,name=remoteConnectorAddr,proto3" json:"remoteConnectorAddr,omitempty"`
	DestinationAddr      string        `protobuf:"bytes,3,opt,name=destinationAddr,proto3" json:"destinationAddr,omitempty"`
	SourcePort           int32         `protobuf:"varint,4,opt,name=sourcePort,proto3" json:"sourcePort,omitempty"`
	Type                 ServiceType   `protobuf:"varint,6,opt,name=type,proto3,enum=shipyard.ServiceType" json:"type,omitempty"`
	Status               ServiceStatus `protobuf:"varint,7,opt,name=status,proto3,enum=shipyard.ServiceStatus" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Service) Reset()         { *m = Service{} }
func (m *Service) String() string { return proto.CompactTextString(m) }
func (*Service) ProtoMessage()    {}
func (*Service) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{8}
}

func (m *Service) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Service.Unmarshal(m, b)
}
func (m *Service) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Service.Marshal(b, m, deterministic)
}
func (m *Service) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Service.Merge(m, src)
}
func (m *Service) XXX_Size() int {
	return xxx_messageInfo_Service.Size(m)
}
func (m *Service) XXX_DiscardUnknown() {
	xxx_messageInfo_Service.DiscardUnknown(m)
}

var xxx_messageInfo_Service proto.InternalMessageInfo

func (m *Service) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Service) GetRemoteConnectorAddr() string {
	if m != nil {
		return m.RemoteConnectorAddr
	}
	return ""
}

func (m *Service) GetDestinationAddr() string {
	if m != nil {
		return m.DestinationAddr
	}
	return ""
}

func (m *Service) GetSourcePort() int32 {
	if m != nil {
		return m.SourcePort
	}
	return 0
}

func (m *Service) GetType() ServiceType {
	if m != nil {
		return m.Type
	}
	return ServiceType_LOCAL
}

func (m *Service) GetStatus() ServiceStatus {
	if m != nil {
		return m.Status
	}
	return ServiceStatus_PENDING
}

type ExposeResponse struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExposeResponse) Reset()         { *m = ExposeResponse{} }
func (m *ExposeResponse) String() string { return proto.CompactTextString(m) }
func (*ExposeResponse) ProtoMessage()    {}
func (*ExposeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{9}
}

func (m *ExposeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExposeResponse.Unmarshal(m, b)
}
func (m *ExposeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExposeResponse.Marshal(b, m, deterministic)
}
func (m *ExposeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExposeResponse.Merge(m, src)
}
func (m *ExposeResponse) XXX_Size() int {
	return xxx_messageInfo_ExposeResponse.Size(m)
}
func (m *ExposeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ExposeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ExposeResponse proto.InternalMessageInfo

func (m *ExposeResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type DestroyRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DestroyRequest) Reset()         { *m = DestroyRequest{} }
func (m *DestroyRequest) String() string { return proto.CompactTextString(m) }
func (*DestroyRequest) ProtoMessage()    {}
func (*DestroyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{10}
}

func (m *DestroyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DestroyRequest.Unmarshal(m, b)
}
func (m *DestroyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DestroyRequest.Marshal(b, m, deterministic)
}
func (m *DestroyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DestroyRequest.Merge(m, src)
}
func (m *DestroyRequest) XXX_Size() int {
	return xxx_messageInfo_DestroyRequest.Size(m)
}
func (m *DestroyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DestroyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DestroyRequest proto.InternalMessageInfo

func (m *DestroyRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ServiceResponse struct {
	Services             []*Service `protobuf:"bytes,1,rep,name=services,proto3" json:"services,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ServiceResponse) Reset()         { *m = ServiceResponse{} }
func (m *ServiceResponse) String() string { return proto.CompactTextString(m) }
func (*ServiceResponse) ProtoMessage()    {}
func (*ServiceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{11}
}

func (m *ServiceResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceResponse.Unmarshal(m, b)
}
func (m *ServiceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceResponse.Marshal(b, m, deterministic)
}
func (m *ServiceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceResponse.Merge(m, src)
}
func (m *ServiceResponse) XXX_Size() int {
	return xxx_messageInfo_ServiceResponse.Size(m)
}
func (m *ServiceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceResponse proto.InternalMessageInfo

func (m *ServiceResponse) GetServices() []*Service {
	if m != nil {
		return m.Services
	}
	return nil
}

func init() {
	proto.RegisterEnum("shipyard.ServiceType", ServiceType_name, ServiceType_value)
	proto.RegisterEnum("shipyard.ServiceStatus", ServiceStatus_name, ServiceStatus_value)
	proto.RegisterType((*NullMessage)(nil), "shipyard.NullMessage")
	proto.RegisterType((*OpenData)(nil), "shipyard.OpenData")
	proto.RegisterType((*Data)(nil), "shipyard.Data")
	proto.RegisterType((*NewConnection)(nil), "shipyard.NewConnection")
	proto.RegisterType((*WriteDone)(nil), "shipyard.WriteDone")
	proto.RegisterType((*ReadDone)(nil), "shipyard.ReadDone")
	proto.RegisterType((*Closed)(nil), "shipyard.Closed")
	proto.RegisterType((*ExposeRequest)(nil), "shipyard.ExposeRequest")
	proto.RegisterType((*Service)(nil), "shipyard.Service")
	proto.RegisterType((*ExposeResponse)(nil), "shipyard.ExposeResponse")
	proto.RegisterType((*DestroyRequest)(nil), "shipyard.DestroyRequest")
	proto.RegisterType((*ServiceResponse)(nil), "shipyard.ServiceResponse")
}

func init() {
	proto.RegisterFile("server.proto", fileDescriptor_ad098daeda4239f7)
}

var fileDescriptor_ad098daeda4239f7 = []byte{
	// 695 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x94, 0xcf, 0x6f, 0xda, 0x4a,
	0x10, 0xc7, 0x31, 0x3f, 0xed, 0xe1, 0x47, 0x78, 0x1b, 0x3d, 0xc5, 0x0f, 0xe9, 0x55, 0xc8, 0xcd,
	0x81, 0x52, 0x95, 0x24, 0x34, 0x95, 0x7a, 0xe8, 0x21, 0x09, 0x41, 0x25, 0x12, 0x81, 0x68, 0x13,
	0xa9, 0xc7, 0xc8, 0xc5, 0xa3, 0xd4, 0x12, 0x78, 0xdd, 0x5d, 0x53, 0xca, 0x1f, 0xd2, 0xbf, 0xb2,
	0xe7, 0xde, 0xab, 0x5d, 0xaf, 0xb1, 0x09, 0xe4, 0x06, 0x33, 0x9f, 0x19, 0xcf, 0xcc, 0x77, 0x76,
	0xa0, 0x26, 0x90, 0xff, 0x40, 0xde, 0x0b, 0x39, 0x8b, 0x18, 0x31, 0xc5, 0x37, 0x3f, 0x5c, 0xbb,
	0xdc, 0x6b, 0x1d, 0x3d, 0x31, 0xf6, 0x34, 0xc7, 0x13, 0x1e, 0xce, 0x4e, 0x44, 0xe4, 0x46, 0x4b,
	0x11, 0x23, 0x4e, 0x1d, 0xaa, 0x93, 0xe5, 0x7c, 0x7e, 0x8b, 0x42, 0xb8, 0x4f, 0xe8, 0xfc, 0x2e,
	0x80, 0x39, 0x0d, 0x31, 0xb8, 0x76, 0x23, 0x97, 0xfc, 0x0f, 0x20, 0xd3, 0xf9, 0x33, 0x7c, 0xf4,
	0x3d, 0xdb, 0x68, 0x1b, 0x1d, 0x8b, 0x5a, 0xda, 0x72, 0xe3, 0x91, 0xd7, 0x50, 0x9f, 0xb1, 0x20,
	0xc0, 0x59, 0xe4, 0xb3, 0x40, 0x12, 0x79, 0x45, 0xd4, 0x52, 0xe3, 0x8d, 0x47, 0x8e, 0xa1, 0xe8,
	0xb9, 0x91, 0x6b, 0x17, 0xda, 0x46, 0xa7, 0xda, 0x6f, 0xf4, 0x92, 0x8a, 0x7a, 0xf2, 0x0b, 0xa3,
	0x1c, 0x55, 0x5e, 0x72, 0x06, 0x65, 0xfc, 0x19, 0x32, 0x81, 0x76, 0x51, 0x71, 0x47, 0x29, 0x37,
	0x54, 0x76, 0x8a, 0xdf, 0x97, 0x28, 0xa2, 0x51, 0x8e, 0x6a, 0x90, 0x9c, 0x43, 0xc5, 0x43, 0x11,
	0x71, 0xb6, 0xb6, 0x4b, 0x2a, 0xc6, 0xce, 0xe4, 0x8e, 0x1d, 0x69, 0x50, 0x82, 0x92, 0x0b, 0x68,
	0x04, 0xb8, 0x7a, 0x4c, 0x4b, 0xb4, 0xcb, 0xcf, 0x3f, 0x38, 0xc1, 0xd5, 0x60, 0xe3, 0x1e, 0xe5,
	0x68, 0x3d, 0xc8, 0x1a, 0xc8, 0x39, 0xc0, 0x8a, 0xfb, 0x11, 0x3e, 0x7a, 0x2c, 0x40, 0xbb, 0xa2,
	0xa2, 0x0f, 0xd3, 0xe8, 0x2f, 0xd2, 0x77, 0xcd, 0x02, 0x1c, 0xe5, 0xa8, 0xb5, 0x4a, 0xfe, 0x90,
	0x33, 0xb0, 0x38, 0xba, 0x5e, 0x1c, 0x64, 0xaa, 0x20, 0x92, 0x06, 0x51, 0x74, 0x3d, 0x1d, 0x63,
	0x72, 0xfd, 0x9b, 0x74, 0xa1, 0x3c, 0x9b, 0x33, 0x81, 0x9e, 0x6d, 0x29, 0xbe, 0x99, 0xf2, 0x03,
	0x65, 0x97, 0xc3, 0x88, 0x09, 0xd2, 0x85, 0x12, 0x72, 0xce, 0xb8, 0x0d, 0x3a, 0x75, 0x2c, 0x77,
	0x8f, 0x87, 0xb3, 0xde, 0xbd, 0x92, 0x7b, 0x94, 0xa3, 0x31, 0x72, 0x65, 0x41, 0x65, 0xa1, 0xd5,
	0x6e, 0x41, 0x51, 0x09, 0x4d, 0xb4, 0x48, 0x52, 0xe2, 0x5a, 0x2c, 0x89, 0x73, 0x00, 0xf5, 0xad,
	0x49, 0x38, 0x55, 0xb0, 0x36, 0xcd, 0x39, 0x00, 0x66, 0x52, 0xb4, 0x63, 0x42, 0x39, 0x2e, 0xc8,
	0xf9, 0x04, 0xf5, 0x2d, 0xb9, 0xc8, 0x5b, 0xa8, 0xe8, 0x7d, 0x51, 0xb9, 0xab, 0xfd, 0x7f, 0xd2,
	0x26, 0xee, 0x63, 0x07, 0x4d, 0x08, 0xe7, 0x8f, 0x01, 0x15, 0x6d, 0x94, 0x15, 0x05, 0xee, 0x02,
	0xf5, 0xd2, 0xa9, 0xdf, 0xe4, 0x14, 0x0e, 0x39, 0x2e, 0x58, 0x84, 0xba, 0x28, 0xc6, 0x2f, 0x3d,
	0x8f, 0xeb, 0xad, 0xdb, 0xe7, 0x22, 0x1d, 0x38, 0x90, 0xc2, 0xfb, 0x81, 0x2b, 0x3b, 0x50, 0x74,
	0x41, 0xd1, 0xcf, 0xcd, 0xe4, 0x15, 0x80, 0x60, 0x4b, 0x3e, 0xc3, 0x3b, 0xc6, 0x23, 0xb5, 0x84,
	0x25, 0x9a, 0xb1, 0x90, 0x37, 0x50, 0x8c, 0xd6, 0x21, 0xaa, 0x6d, 0x69, 0xf4, 0xff, 0xdd, 0xe9,
	0xe2, 0x61, 0x1d, 0x22, 0x55, 0x08, 0x39, 0x81, 0x72, 0xfc, 0xc2, 0xd4, 0x72, 0x34, 0xb2, 0xab,
	0xa5, 0xe1, 0x58, 0x11, 0xaa, 0x31, 0xa7, 0x0d, 0x8d, 0x64, 0x6a, 0x22, 0x64, 0x81, 0x40, 0xd2,
	0x80, 0xfc, 0xe6, 0xc1, 0xe5, 0x7d, 0x4f, 0x12, 0xdb, 0x2b, 0xbd, 0x43, 0x5c, 0xc0, 0x41, 0x32,
	0xcf, 0x24, 0xc9, 0x3b, 0x30, 0xf5, 0x64, 0x85, 0x6d, 0xb4, 0x0b, 0xfb, 0x87, 0xbf, 0x41, 0xba,
	0xc7, 0x50, 0xcd, 0xf4, 0x42, 0x2c, 0x28, 0x8d, 0xa7, 0x83, 0xcb, 0x71, 0x33, 0x47, 0x00, 0xca,
	0x74, 0x78, 0x3b, 0x7d, 0x18, 0x36, 0x8d, 0xee, 0x07, 0xa8, 0x6f, 0x35, 0x41, 0xaa, 0x50, 0xb9,
	0x1b, 0x4e, 0xae, 0x6f, 0x26, 0x9f, 0x9b, 0x39, 0x52, 0x03, 0x73, 0x30, 0xbd, 0xbd, 0x1b, 0x0f,
	0x25, 0x2b, 0x53, 0x0c, 0x29, 0x9d, 0xd2, 0x66, 0xbe, 0xff, 0x2b, 0x0f, 0x4d, 0x9a, 0x15, 0x48,
	0xbe, 0xa4, 0x8f, 0x00, 0xf2, 0xd4, 0xdc, 0x47, 0x1c, 0xdd, 0x05, 0xc9, 0x3c, 0x87, 0xe4, 0x00,
	0xb5, 0xf6, 0xd8, 0x3a, 0xc6, 0xa9, 0x41, 0xae, 0x92, 0x3d, 0x4b, 0xd6, 0xe5, 0xa5, 0x7b, 0xd1,
	0xb2, 0x77, 0x1d, 0x7a, 0x3c, 0x97, 0x9b, 0x99, 0x26, 0x49, 0x5e, 0x3c, 0x20, 0xad, 0x8c, 0xde,
	0x99, 0x63, 0x49, 0x2e, 0xa0, 0x36, 0xf6, 0x45, 0xa4, 0xe3, 0x05, 0xd9, 0x8f, 0xb5, 0xfe, 0xdb,
	0x1d, 0xbb, 0x2e, 0xe2, 0x6b, 0x59, 0x1d, 0xe1, 0xf7, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x5a,
	0x84, 0x83, 0x14, 0xb7, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RemoteConnectionClient is the client API for RemoteConnection service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RemoteConnectionClient interface {
	// Open a stream between two servers
	OpenStream(ctx context.Context, opts ...grpc.CallOption) (RemoteConnection_OpenStreamClient, error)
	// Open a new TCP port for the local service on the server and start listening
	ExposeService(ctx context.Context, in *ExposeRequest, opts ...grpc.CallOption) (*ExposeResponse, error)
	// Close the remote TCP port and remove all resources
	DestroyService(ctx context.Context, in *DestroyRequest, opts ...grpc.CallOption) (*NullMessage, error)
	// Close the remote TCP port and remove all resources
	ListServices(ctx context.Context, in *NullMessage, opts ...grpc.CallOption) (*ServiceResponse, error)
}

type remoteConnectionClient struct {
	cc grpc.ClientConnInterface
}

func NewRemoteConnectionClient(cc grpc.ClientConnInterface) RemoteConnectionClient {
	return &remoteConnectionClient{cc}
}

func (c *remoteConnectionClient) OpenStream(ctx context.Context, opts ...grpc.CallOption) (RemoteConnection_OpenStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RemoteConnection_serviceDesc.Streams[0], "/shipyard.RemoteConnection/OpenStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &remoteConnectionOpenStreamClient{stream}
	return x, nil
}

type RemoteConnection_OpenStreamClient interface {
	Send(*OpenData) error
	Recv() (*OpenData, error)
	grpc.ClientStream
}

type remoteConnectionOpenStreamClient struct {
	grpc.ClientStream
}

func (x *remoteConnectionOpenStreamClient) Send(m *OpenData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *remoteConnectionOpenStreamClient) Recv() (*OpenData, error) {
	m := new(OpenData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *remoteConnectionClient) ExposeService(ctx context.Context, in *ExposeRequest, opts ...grpc.CallOption) (*ExposeResponse, error) {
	out := new(ExposeResponse)
	err := c.cc.Invoke(ctx, "/shipyard.RemoteConnection/ExposeService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteConnectionClient) DestroyService(ctx context.Context, in *DestroyRequest, opts ...grpc.CallOption) (*NullMessage, error) {
	out := new(NullMessage)
	err := c.cc.Invoke(ctx, "/shipyard.RemoteConnection/DestroyService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteConnectionClient) ListServices(ctx context.Context, in *NullMessage, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/shipyard.RemoteConnection/ListServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RemoteConnectionServer is the server API for RemoteConnection service.
type RemoteConnectionServer interface {
	// Open a stream between two servers
	OpenStream(RemoteConnection_OpenStreamServer) error
	// Open a new TCP port for the local service on the server and start listening
	ExposeService(context.Context, *ExposeRequest) (*ExposeResponse, error)
	// Close the remote TCP port and remove all resources
	DestroyService(context.Context, *DestroyRequest) (*NullMessage, error)
	// Close the remote TCP port and remove all resources
	ListServices(context.Context, *NullMessage) (*ServiceResponse, error)
}

// UnimplementedRemoteConnectionServer can be embedded to have forward compatible implementations.
type UnimplementedRemoteConnectionServer struct {
}

func (*UnimplementedRemoteConnectionServer) OpenStream(srv RemoteConnection_OpenStreamServer) error {
	return status1.Errorf(codes.Unimplemented, "method OpenStream not implemented")
}
func (*UnimplementedRemoteConnectionServer) ExposeService(ctx context.Context, req *ExposeRequest) (*ExposeResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ExposeService not implemented")
}
func (*UnimplementedRemoteConnectionServer) DestroyService(ctx context.Context, req *DestroyRequest) (*NullMessage, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DestroyService not implemented")
}
func (*UnimplementedRemoteConnectionServer) ListServices(ctx context.Context, req *NullMessage) (*ServiceResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListServices not implemented")
}

func RegisterRemoteConnectionServer(s *grpc.Server, srv RemoteConnectionServer) {
	s.RegisterService(&_RemoteConnection_serviceDesc, srv)
}

func _RemoteConnection_OpenStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RemoteConnectionServer).OpenStream(&remoteConnectionOpenStreamServer{stream})
}

type RemoteConnection_OpenStreamServer interface {
	Send(*OpenData) error
	Recv() (*OpenData, error)
	grpc.ServerStream
}

type remoteConnectionOpenStreamServer struct {
	grpc.ServerStream
}

func (x *remoteConnectionOpenStreamServer) Send(m *OpenData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *remoteConnectionOpenStreamServer) Recv() (*OpenData, error) {
	m := new(OpenData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RemoteConnection_ExposeService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExposeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteConnectionServer).ExposeService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shipyard.RemoteConnection/ExposeService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteConnectionServer).ExposeService(ctx, req.(*ExposeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteConnection_DestroyService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteConnectionServer).DestroyService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shipyard.RemoteConnection/DestroyService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteConnectionServer).DestroyService(ctx, req.(*DestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteConnection_ListServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NullMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteConnectionServer).ListServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shipyard.RemoteConnection/ListServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteConnectionServer).ListServices(ctx, req.(*NullMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _RemoteConnection_serviceDesc = grpc.ServiceDesc{
	ServiceName: "shipyard.RemoteConnection",
	HandlerType: (*RemoteConnectionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExposeService",
			Handler:    _RemoteConnection_ExposeService_Handler,
		},
		{
			MethodName: "DestroyService",
			Handler:    _RemoteConnection_DestroyService_Handler,
		},
		{
			MethodName: "ListServices",
			Handler:    _RemoteConnection_ListServices_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "OpenStream",
			Handler:       _RemoteConnection_OpenStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "server.proto",
}
